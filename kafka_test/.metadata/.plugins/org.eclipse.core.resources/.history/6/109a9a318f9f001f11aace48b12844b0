package kafkaApp;




import org.apache.avro.generic.GenericRecord;
import org.apache.avro.specific.SpecificRecordBase;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.stereotype.Service;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.annotation.EnableKafkaStreams;
import org.springframework.kafka.listener.MessageListener;

import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.Serializer;
import org.apache.avro.Schema;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.kafka.annotation.EnableKafka;


@Service
@EnableKafka
public class KafkaMessageProcessor {

    @Autowired
    private KafkaTemplate<String, ValueSchema> kafkaTemplate;

    private static final String TARGET_TOPIC = "loadtopic"; // Целевой топик
    private static final String SOURCE_TOPIC = "test"; // Исходный топик
    private static final long DELAY_MS = 500; // Задержка в 500 мс

    // Слушатель Kafka для приема Avro-сообщений
    @KafkaListener(topics = SOURCE_TOPIC, groupId = "test-group")
    public void listen(ConsumerRecord<String, GenericRecord> record, Acknowledgment acknowledgment) {
        GenericRecord value = record.value();
        System.out.println("Received message: " + value);

        try {
            // Добавляем задержку перед отправкой сообщения в целевой топик
            Thread.sleep(DELAY_MS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Восстановление состояния прерывания потока
            System.err.println("Thread was interrupted: " + e.getMessage());
        }

        // Преобразование поля 'name' из Avro-сообщения
        String transformedMessage = "Computer name - " + value.get("name");

        // Создаем новое Avro-сообщение для отправки в целевой топик
        ValueSchema transformedValue = new ValueSchema(transformedMessage);

        // Отправка сообщения в целевой топик
        kafkaTemplate.send(TARGET_TOPIC, transformedValue);
        System.out.println("Sent message to target topic: " + transformedMessage);
        
        // Подтверждение получения сообщения
        acknowledgment.acknowledge();
    }
}