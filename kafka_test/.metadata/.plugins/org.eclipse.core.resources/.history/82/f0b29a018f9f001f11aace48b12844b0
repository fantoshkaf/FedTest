package kafkaApp;




import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.listener.MessageListener;
import org.springframework.kafka.listener.MessageListenerContainer;
import org.springframework.stereotype.Service;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
import org.apache.avro.generic.GenericRecord;
import org.apache.kafka.common.serialization.Deserializer;
import org.springframework.kafka.annotation.EnableKafka;

@EnableKafka
@Service
public class KafkaMessageProcessor {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    private static final String TARGET_TOPIC = "loadtopic"; // Целевой топик
    private static final String SOURCE_TOPIC = "test"; // Исходный топик
    private static final long DELAY_MS = 500; // Задержка в 500 мс

    private static final String AVRO_SCHEMA = "{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"dev.test.xk6.kafka\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]}";

    @KafkaListener(topics = SOURCE_TOPIC, groupId = "test-group")
    public void listen(ConsumerRecord<String, byte[]> message) {
        System.out.println("Received message: " + new String(message.value()));

        try {
            // Десериализация Avro сообщения в объект Value
            ValueSchema value = deserializeAvroMessage(message.value());

            // Выводим десериализованный объект
            System.out.println("Deserialized Value: " + value);

            // Добавляем задержку перед отправкой сообщения в целевой топик
            Thread.sleep(DELAY_MS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Восстановление состояния прерывания потока
            System.err.println("Thread was interrupted: " + e.getMessage());
        }

        // Формируем новое сообщение с префиксом
        String transformedMessage = "Computer name - " + value.getName();

        // Отправка сообщения в целевой топик
        kafkaTemplate.send(TARGET_TOPIC, transformedMessage);
        System.out.println("Sent message to target topic: " + transformedMessage);
    }

    // Десериализация Avro сообщения в объект Value
    private ValueSchema deserializeAvroMessage(byte[] message) {
        // Используем Avro-схему для десериализации
        try {
            org.apache.avro.Schema schema = new org.apache.avro.Schema.Parser().parse(AVRO_SCHEMA);
            // Создаем десериализатор для Avro сообщений
            org.apache.avro.generic.GenericDatumReader<GenericRecord> reader = new org.apache.avro.generic.GenericDatumReader<>(schema);
            org.apache.avro.io.Decoder decoder = org.apache.avro.io.EncoderFactory.get().binaryDecoder(message, null);
            GenericRecord record = reader.read(null, decoder);
            // Конвертируем GenericRecord в объект Value
            ValueSchema value = new ValueSchema();
            value.setName(record.get("name").toString());
            return value;
        } catch (Exception e) {
            throw new RuntimeException("Error deserializing Avro message", e);
        }
    }
}