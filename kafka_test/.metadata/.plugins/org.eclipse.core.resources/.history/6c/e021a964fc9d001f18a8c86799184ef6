package kafkaApp;




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import io.micrometer.core.instrument.MeterRegistry;

@Service
public class KafkaMessageProcessor {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    @Autowired
    private MeterRegistry meterRegistry;

    private static final String TARGET_TOPIC = "loadtopic"; // Целевой топик
    private static final String SOURCE_TOPIC = "test"; // Исходный топик
    private static final long DELAY_MS = 500; // Задержка в 500 мс

    public KafkaMessageProcessor(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
        meterRegistry.counter("kafka.messages.processed", "topic", TARGET_TOPIC);
    }

    @KafkaListener(topics = SOURCE_TOPIC, groupId = "test-group")
    public void listen(String message) {
        System.out.println("Received message: " + message);

        try {
            // Добавляем задержку перед отправкой сообщения в целевой топик
            Thread.sleep(DELAY_MS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Восстановление состояния прерывания потока
            System.err.println("Thread was interrupted: " + e.getMessage());
        }

        // Формируем новое сообщение с префиксом
        String transformedMessage = "Computer name - " + message;

        // Отправка сообщения в целевой топик
        kafkaTemplate.send(TARGET_TOPIC, transformedMessage);
        System.out.println("Sent message to target topic: " + transformedMessage);

        // Увеличение счетчика сообщений
        meterRegistry.counter("kafka.messages.processed", "topic", TARGET_TOPIC).increment();
    }
}